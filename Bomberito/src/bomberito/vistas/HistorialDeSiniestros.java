/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bomberito.vistas;

import bomberito.accesoADatos.SiniestroData;
import bomberito.entidades.Siniestro;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Melina
 */
public class HistorialDeSiniestros extends javax.swing.JInternalFrame {
    private DefaultTableModel modelo = new DefaultTableModel();
    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
    SiniestroData controlSin=null;
    /**
     * Creates new form HistorialDeSiniestros
     */
    public HistorialDeSiniestros() {
        controlSin=new SiniestroData();
        modelo=new DefaultTableModel();
        initComponents();
        armarCabeceraTabla();
        cargarTabla();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        botonFiltrar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Historial de Siniestros");

        JTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(JTabla);

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        botonFiltrar.setText("Filtrar");
        botonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltrarActionPerformed(evt);
            }
        });

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha Inicio");

        jLabel3.setText("Fecha Final");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setText("Filtrar entre fechas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(301, 301, 301)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel2)
                        .addGap(93, 93, 93)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(botonFiltrar)
                .addGap(103, 103, 103)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(botonFiltrar)
                        .addComponent(jButton2))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void botonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFiltrarActionPerformed
        LocalDate fechaIn = null;
        LocalDate fechaFin = null;
        String punt;
        modelo.setRowCount(0);

        if (jDateChooser1.getDate() != null && jDateChooser2.getDate() != null) {
            fechaIn = jDateChooser1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            fechaFin = jDateChooser2.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona ambas fechas para filtrar.", "Error", JOptionPane.ERROR_MESSAGE);
            cargarTabla();
            return;
        }

        for(Siniestro sin : controlSin.HistorialSin()){
            LocalDate fechaSin = sin.getFechaSiniestro();
            
            if(fechaSin.compareTo(fechaIn) >=0 && fechaSin.compareTo(fechaFin) <=0  ){
                String IdNomBri;
            if(sin.getCodBrigada() != null) {
                IdNomBri = "[" + sin.getCodBrigada().getIdBrigada() + "] " + sin.getCodBrigada().getNombreBrigada();
            } else {
                IdNomBri = "Sin brigada asignada";
            }
            String activo = sin.isActivo() ? "Si" : "No";
            
            if (sin.getPuntuacion()>0){
                punt=Integer.toString(sin.getPuntuacion());
            }else{
                punt="Sin puntuacion";
            }
               String horaFormateada;
        if (sin.getHoraSin() != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            horaFormateada = sdf.format(Date.from(sin.getHoraSin().atDate(LocalDate.of(1970, 1, 1)).atZone(ZoneId.systemDefault()).toInstant()));
        } else {
            horaFormateada = "Sin hora";
        }
            modelo.addRow(new Object[]{
                sin.getIdSiniestro(),
                sin.getTipo(),
                sin.getCoordX(),
                sin.getCoordY(),
                IdNomBri,
                sin.getDetalles(),
                sin.getFechaSiniestro().toString(),
                punt,
                sin.getFechaResolucion() != null ? sin.getFechaResolucion().toString(): "Sin fecha",
                activo,
                horaFormateada
            });
            }
        }
        
    }//GEN-LAST:event_botonFiltrarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         modelo.setRowCount(0);
         cargarTabla();
         
         jDateChooser1.setDate(null);
         jDateChooser2.setDate(null);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTabla;
    private javax.swing.JButton botonFiltrar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void armarCabeceraTabla() {
        modelo.addColumn("ID");
        modelo.addColumn("Tipo");
        modelo.addColumn("X");
        modelo.addColumn("Y");
        modelo.addColumn("codBrigada");
        modelo.addColumn("Detalles");
        modelo.addColumn("Fecha Inicial");
        modelo.addColumn("Puntuacion");
        modelo.addColumn("Fecha Resolucion");
        modelo.addColumn("Activo");
        modelo.addColumn("Hora");
        JTabla.setModel(modelo);
    }
    
    private void cargarTabla(){
        
        String activo;
        String punt;
        for (Siniestro cosa : controlSin.HistorialSin()) {
            String IdNomBri;
            if (cosa.getCodBrigada() != null) {
                IdNomBri = "[" + cosa.getCodBrigada().getIdBrigada() + "] " + cosa.getCodBrigada().getNombreBrigada();
            } else {
                // En caso que el codBrigada es null
                IdNomBri = "Sin brigada asignada";
            }
            if (cosa.isActivo()){
                activo="Si";
            }else{
                activo="No";
            }
            if (cosa.getPuntuacion()>0){
                punt=Integer.toString(cosa.getPuntuacion());
            }else{
                punt="Sin puntuacion";
            }
            String horaFormateada;
            if (cosa.getHoraSin() != null) {
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                horaFormateada = sdf.format(Date.from(cosa.getHoraSin().atDate(LocalDate.of(1970, 1, 1)).atZone(ZoneId.systemDefault()).toInstant()));
            } else {
                horaFormateada = "Sin hora";
            }
            modelo.addRow(new Object[]{
                cosa.getIdSiniestro(),
                cosa.getTipo(),
                cosa.getCoordX(),
                cosa.getCoordY(),
                IdNomBri,
                cosa.getDetalles(),
                cosa.getFechaSiniestro(),
                punt,
                cosa.getFechaResolucion(),
                activo,
                horaFormateada
            });
            System.out.println("Hora sin formato: " + cosa.getHoraSin());
        }
        
    }
    
    
}
